import { useState, useEffect, useMemo } from "react";
import abi from "../abi/Events2front.json";
import { ethers } from "ethers";

const DataLayout = () => {
  const [currentAccount, setCurrentAccount] = useState("");
  const [provider, setProvider] = useState(false);
  const [cntr, setCntr] = useState("");
  const [searchAddress, setSearchAddress] = useState("0x6c93589a905Ec991a4987b727D32191feD1C60a3");
  const [balance, setBalance] = useState(0);
  const [logs, setLogs] = useState([[], null]);
  const [logsOptions, setLogsOptions] = useState("");
  const [messages, setMessages] = useState("");

  // —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∞–±–∏
  const intrfc = new ethers.utils.Interface(abi.abi);

  // –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
  function handleAccountsChanged(accounts) {
    // console.log("Accounts", accounts);
    setCurrentAccount(accounts[0]);
  }

  // –°–º–µ–Ω–∞ —Å–µ—Ç–∏
  function handleChainChanged(chainId) {
    if (chainId !== "0x5") {
      setCurrentAccount("");
    }
  }


  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ—à–µ–ª—å–∫–∞
    var hv = typeof window !== "undefined" && window?.ethereum; //! –∫—Ä—É—Ç–æ–π –ø—Ä–∏–µ–º
    //setHaveWallet(hv);

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    if (hv) {
      //–¥–æ–ª–∂–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å—Ä–∞–∑—É, –Ω–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–µ—Ç–∞–º–∞—Å–∫–∞
      const walletPprovider = new ethers.providers.Web3Provider(window.ethereum);
      setProvider(walletPprovider);

      //–∑–¥–µ—Å—å —Å–ª—É—à–∞–µ—Ç—Å—è WithdrawMoney
      const filter = {
        address: contractAddress,
        topics: [intrfc.getEventTopic("WithdrawMoney")],
        fromBlock: 0,
        toBlock: "latest"
      }
      walletPprovider.on(filter, (log, event) => {
        console.log('new Withdraw event!', log)//todo —Å–¥–µ–ª–∞—Ç—å –∞–ª–µ—Ä—Ç, —É—á–µ—Å—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
      })

      window.ethereum.on("accountsChanged", handleAccountsChanged);
      window.ethereum.on("chainChanged", handleChainChanged);
      return () => {
        walletPprovider.removeAllListeners();//–∑–¥–µ—Å—å —Å–±—Ä–∞—Å—ã–≤–∞—é–µ—Ç—Å—è –ª–∏—Å—Ç–µ–Ω–µ—Ä

        window.ethereum.removeListener(
          "accountsChanged",
          handleAccountsChanged
        );
        window.ethereum.removeListener("chainChanged", handleChainChanged);
      };
    }
  }, []);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–µ—Ç–∞–º–∞—Å–∫—É
  const handleMetamaskConnect = async () => {
    try {
      await window.ethereum.request({
        method: "wallet_switchEthereumChain",
        params: [{ chainId: "0x5" }],
      });

      const accounts = await provider.send("eth_requestAccounts", []);
      setCurrentAccount(accounts[0]);
    } catch (error) {
      console.error(error);
    }
  };

  // –ê–¥—Ä–µ—Å—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –≤ —Å–µ—Ç–∏
  const contractAddress = "0x7876A574E6FaA409514c30dc2d8DA732254c9af6";

  // –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
  const getBalance = async () => {
    try {
      // –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      const contract = new ethers.Contract(
        contractAddress,
        abi.abi,
        provider
      );
      console.log("Contract:", contract);
      // –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –≤ 16-—Ä–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
      const contractBalance = await contract.getBalance();

      // –±–µ—Ä–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∫–∞–∫ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞
      // const contractBalance = await walletProvider.getBalance(contractAddress);

      // –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä 0x00000
      const contractBalanceEthers = ethers.utils.formatEther(contractBalance);

      // —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Å—Ç–µ–π—Ç
      setBalance(contractBalanceEthers);

      console.log("Account balance:", contractBalanceEthers);
    } catch (error) {
      console.error(error);
    }
  };

  // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ payable
  const contribute = async () => {
    event.preventDefault();
    try {
      // –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      const contract = new ethers.Contract(
        contractAddress,
        abi.abi,
        provider.getSigner()
      );
      // –∑–∞–≤–æ–¥–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ {} –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—É–º–º–∞
      if (cntr) {
        const options = { value: ethers.utils.parseEther(cntr) };
        const tx = await contract.contribute(options);

        // –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        //const txc = await walletProvider.waitForTransaction(tx.hash)
        provider.once(tx.hash, (txc) => {
          setMessages("tx completed! " + txc.blockNumber);
        })

        setCntr("");
      }
    } catch (error) {
      console.error(error);
    }
  };


  //–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Estimate gas price
  const tryWithdraw = async () => {
    try {
      // –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      const contract = new ethers.Contract(
        contractAddress,
        abi.abi,
        provider.getSigner()
      );

      // const estimation = await contract.callStatic.withdrawMoneyTo(currentAccount);

      // setMessages("Check transaction " + estimation);

    } catch (error) {
      console.error("hhhh", error);
      //setMessages("OK Gas estimation "+ estimation);
    }
  };

  // –í—ã–≤–æ–¥ –¥–µ–Ω–µ–≥
  const withdraw = async () => {
    try {
      // –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      const contract = new ethers.Contract(
        contractAddress,
        abi.abi,
        provider.getSigner()
      );
      await contract.withdrawMoneyTo(provider.getSigner());

      provider.once(tx.hash, (txc) => {
        setMessages("tx completed! " + txc.blockNumber);
      })

    } catch (error) {
      console.error(error);
    }
  };

  // –õ–æ–≥–∏
  const getLogs = async () => {
    event.preventDefault();

    if (!logsOptions)//–µ—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
      return;

    let topic = [intrfc.getEventTopic(logsOptions)];

    //–ø–æ–∏—Å–∫ –ø–æ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
    if (logsOptions == "Contribute" && searchAddress)
      topic[1] = ethers.utils.hexZeroPad(searchAddress, 32);

    const rawLogs = await provider.getLogs({
      address: contractAddress,
      //topics: [ethers.utils.id(logsOptions)],//Contribute(address,address,uint256)
      topics: topic,
      fromBlock: 0,
      toBlock: "latest",
    });
    // console.log("rawLogs:", rawLogs);
    setLogs([rawLogs, logsOptions]);

    // console.log(`Parsing events...`);

    // rawLogs.forEach((log) => {
    //   // console.log(`BEFORE PARSING:`);
    //   // console.debug(log);
    //   // console.log(`\n`);

    //   console.log(`AFTER PARSING:`);
    //   const parsedLog = intrfc.parseLog(log);
    //   // parsing log
    //   console.log("Address:", parsedLog.args[0]);
    //   if (logsOptions == "Contribute(address,address,uint256)") {
    //     console.log("BigNumber:", ethers.utils.formatEther(parsedLog?.args[2]));
    //   } else {
    //     console.log("BigNumber:", ethers.utils.formatEther(parsedLog?.args[1]));
    //   }
    //   console.log("Header:", parsedLog.name);
    //   console.log("************************************************");
    // });
  };

  // –¢–∞–±–ª–∏—Ü–∞ –õ–æ–≥–æ–≤
  const TableData = () =>
    logs[0].map((log, id) => {
      const parsedLog = intrfc.parseLog(log);
      console.log("parsedLog:", parsedLog.args);
      return (
        <tr key={id}>
          <td key={id + 1} className="border border-slate-300">
            {parsedLog.args[0]}
          </td>
          {logs[1] == "Contribute" ? (
            <td key={id + 2} className="border border-slate-300">
              {ethers.utils.formatEther(parsedLog.args[2])}
            </td>
          ) : (
            <td key={id + 3} className="border border-slate-300">
              {ethers.utils.formatEther(parsedLog.args[1])}
            </td>
          )}
        </tr>
      );
    });

  // if (!haveWallet) return <p>no Wallet</p>;

  return (
    <>
      {/* show address */}
      <div className="flex flex-row justify-between p-3">
        {currentAccount ? (
          <>
            <div className="justify-start">
              <p className="text-red-400 text-xl p-2">{messages}</p>
            </div>
            <div className="flex flex-row justify-end p-3">

              <p className="text-xl p-2">üí∏ {currentAccount}</p>
              <button
                onClick={() => {
                  setCurrentAccount("");
                }}
              >
                üü¢
              </button>
            </div>
          </>
        ) : (
          <>
            <div className="justify-start">
              <p className="text-red-400 text-xl p-2">{messages}</p>
            </div>
            <div className="flex flex-row justify-end p-3">
              <button
                onClick={handleMetamaskConnect}
              >
                üî¥ Sign In
              </button>
            </div>
          </>
        )}
      </div>

      {/* get balance */}
      <div className="flex flex-col items-end p-3">
        <div className="flex flex-row">
          {currentAccount ? (
            <>
              <p className="p-2 text-4xl">{balance}</p>
              <button
                className="text-zinc-200 text-4xl p-2"
                onClick={getBalance}
              >
                ‚öñÔ∏è Get balance
              </button>
            </>
          ) : (
            <>
              <p className="text-zinc-200 text-4xl p-2">‚öñÔ∏è Get balance</p>
            </>
          )}
        </div>

        {/* contribute to the contract */}
        <div className="flex flex-row p-3">
          {currentAccount ? (
            <form onSubmit={contribute}>
              <input
                className="text-zinc-400 p-2 mx-4 text-4xl"
                onChange={(e) => setCntr(e.target.value)}
                value={cntr}
                placeholder="Enter amount"
              />
              <button
                className="p-2 text-4xl"
                type="submit"
                onClick={contribute}
              >
                ü™ô Contribute money
              </button>
            </form>
          ) : (
            <p className="p-2 text-4xl">ü™ô Contribute money</p>
          )}
        </div>

        {/* withdraw money*/}
        <div className="flex flex-row p-3">
          {currentAccount ? (
            <>
              <button
                className="p-2 text-2xl"
                onClick={tryWithdraw}
              >
                ‚úî Check transaction
              </button>
              <button
                className="p-2 text-4xl"
                onClick={withdraw}
              >
                üèÜ Withdraw money
              </button>
            </>
          ) : (
            <p className="p-2 text-4xl">ü™ô Withdraw money</p>
          )}
        </div>

        {/* setLogs */}
        <div className="flex flex-row justify-end p-3">
          {currentAccount ? (
            <>

              <form onSubmit={getLogs}>
                <input
                  className="text-zinc-400 p-2 mx-4 text-4xl"
                  onChange={(e) => setSearchAddress(e.target.value)}
                  value={searchAddress}
                  placeholder="Enter indexed address"
                />
                <select
                  className="text-orange-400 text-lg bg-transparent p-4 border-dashed border-zinc-800"
                  onChange={(e) => setLogsOptions(e.target.value)}
                >
                  <option>-</option>
                  <option value={"Contribute"}>
                    Contributor
                  </option>
                  <option value={"NewLargestContributor"}>
                    Highest Contributor
                  </option>
                  <option value={"WithdrawMoney"}>
                    Withdraw
                  </option>
                </select>
                <button className="p-2 text-4xl text-right" type="submit" onClick={getLogs}>
                  ‚öí Get logs
                </button>
              </form>
            </>
          ) : (
            <p className="p-2 text-4xl">‚öí Get logs</p>
          )}
        </div>


      </div>

      {/* table */}
      <div className="flex flex-col pt-8 p-4">
        {currentAccount ? (
          <table className="table-fixed border-collapse border border-slate-400">
            <thead className="">
              <tr className="my-3 text-xl">
                <th className="border border-slate-300">address</th>
                <th className="border border-slate-300">amount</th>
              </tr>
            </thead>
            <tbody className="text-center text-lg">
              <TableData />
            </tbody>
          </table>
        ) : null}
      </div>
    </>
  );
};

export default DataLayout;
